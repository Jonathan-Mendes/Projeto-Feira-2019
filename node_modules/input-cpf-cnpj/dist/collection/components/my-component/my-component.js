import { CPF_LENGTH, isCPFValid, isCNPJValid } from './validation';
export class InputCpfCnpj {
    inputChanged(event) {
        const value = event.target.value.trim();
        let cleannedValue = this.removeAnySpaces(value);
        cleannedValue = this.removePunctuation(cleannedValue);
        let result;
        if (cleannedValue.length <= CPF_LENGTH) {
            this.value = this.applyCPFMask(cleannedValue);
            result = isCPFValid(cleannedValue);
        }
        else {
            this.value = this.applyCNPJMask(cleannedValue);
            result = isCNPJValid(cleannedValue);
        }
        this.valid.emit(result);
    }
    removePunctuation(value) {
        return value.replace(/(~|`|!|@|#|$|%|^|&|\*|\(|\)|{|}|\[|\]|;|:|\"|'|<|,|\.|>|\?|\/|\\|\||-|_|\+|=)/g, "");
    }
    removeAnySpaces(value) {
        return value.replace(/ +?/g, '');
    }
    applyCPFMask(value) {
        const firstPart = value.replace(/^(\d{3})/, '$1.');
        const secondPart = firstPart.replace(/^(\d{3}.)(\d{3})/, '$1$2.');
        const thirdPart = secondPart.replace(/^(\d{3}.)(\d{3}.)(\d{3})/, '$1$2$3-');
        return thirdPart;
    }
    applyCNPJMask(value) {
        const firstPart = value.replace(/^(\d{2})/, '$1.');
        const secondPart = firstPart.replace(/^(\d{2}.)(\d{3})/, '$1$2.');
        const thirdPart = secondPart.replace(/^(\d{2}.)(\d{3}.)(\d{3})/, '$1$2$3/');
        const fourthPart = thirdPart.replace(/^(\d{2}.)(\d{3}.)(\d{3}\/)(\d{4})/, '$1$2$3$4-');
        return fourthPart;
    }
    render() {
        return (h("input", { type: "text", value: this.value, autocomplete: this.autocomplete, maxlength: this.maxlength, minlength: this.minlength, pattern: this.pattern, placeholder: this.placeholder, size: this.size, required: this.required, class: this.classes, onKeyUp: (event) => this.inputChanged(event), onChange: event => this.changed.emit(event), onInput: event => this.input.emit(event) }));
    }
    static get is() { return "input-cpf-cnpj"; }
    static get properties() { return {
        "autocomplete": {
            "type": String,
            "attr": "autocomplete"
        },
        "classes": {
            "type": String,
            "attr": "classes"
        },
        "maxlength": {
            "type": String,
            "attr": "maxlength"
        },
        "minlength": {
            "type": String,
            "attr": "minlength"
        },
        "pattern": {
            "type": String,
            "attr": "pattern"
        },
        "placeholder": {
            "type": String,
            "attr": "placeholder"
        },
        "required": {
            "type": Boolean,
            "attr": "required"
        },
        "size": {
            "type": Number,
            "attr": "size"
        },
        "value": {
            "type": String,
            "attr": "value",
            "mutable": true
        }
    }; }
    static get events() { return [{
            "name": "valid",
            "method": "valid",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }, {
            "name": "changed",
            "method": "changed",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }, {
            "name": "input",
            "method": "input",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return "/**style-placeholder:input-cpf-cnpj:**/"; }
}
